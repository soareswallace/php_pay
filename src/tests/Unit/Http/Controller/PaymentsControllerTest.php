<?php


namespace Tests\Unit\Http\Controller;


use App\Http\Controllers\PaymentsController;
use App\Http\Service\PaymentsService;
use Illuminate\Http\Request;
use Tests\TestCase;

class PaymentsControllerTest extends TestCase
{
    private const PAYER_ID = 1;
    private const PAYEE_ID = 2;
    private const VALUE = 10;

    private $paymentsServiceMock;

    private $controller;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->paymentsServiceMock = \Mockery::mock(PaymentsService::class);
        $this->controller = new PaymentsController($this->paymentsServiceMock);
    }

    public function testHappyPath()
    {
        $request = $this->createARequest(self::PAYER_ID, self::PAYEE_ID, self::VALUE);
        $responseExpected = $this->createJSONResponse(
            PaymentsController::AUTHORIZED_MESSAGE
        );

        $this->paymentsServiceMock->expects('performTransaction')
            ->with(self::PAYER_ID, self::PAYEE_ID, self::VALUE)
            ->andReturn(true);

        $response = $this->controller->transaction($request);

        $this->assertEquals($responseExpected, $response);
    }

    public function createARequest($payerId, $payeeId, $value)
    {
        return new Request([], [], [
            PaymentsController::VALUE_KEY => $value,
            PaymentsController::PAYER_KEY => $payerId,
            PaymentsController::PAYEE_KEY => $payeeId
        ]);
    }

    public function createJSONResponse($message)
    {
        $response = [
            PaymentsController::MESSAGE_KEY => $message
        ];

        $responseJSON = json_encode($response);

        echo $responseJSON;
    }
}
